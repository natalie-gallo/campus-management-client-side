{"ast":null,"code":"var _jsxFileName = \"/Users/nataliegallo/CS/webdev/finalproject/client-side/src/components/containers/NewCampusContainer.js\";\n/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let campus = {\n        name: this.state.name,\n        address: this.state.address,\n        description: this.state.description,\n        imageURL: this.state.imageURL\n      };\n\n      // Add new campus in back-end database\n      let newCampus = await this.props.addCampus(campus);\n\n      // Update state, and trigger redirect to show the new campus\n      this.setState({\n        name: \"\",\n        address: \"\",\n        description: \"\",\n        imageURL: \"\",\n        redirect: true,\n        redirectId: newCampus.id\n      });\n    };\n    this.state = {\n      name: \"\",\n      address: \"\",\n      description: \"\",\n      imageURL: \"\",\n      //campusId: null, \n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/campus/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewCampusView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addCampus: campus => dispatch(addCampusThunk(campus))\n  };\n};\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewCampusView","addCampusThunk","NewCampusContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","campus","state","address","description","imageURL","newCampus","addCampus","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["/Users/nataliegallo/CS/webdev/finalproject/client-side/src/components/containers/NewCampusContainer.js"],"sourcesContent":["/*==================================================\nNewCampusContainer.js\n\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewCampusView from '../views/NewCampusView';\nimport { addCampusThunk } from '../../store/thunks';\n\nclass NewCampusContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      name: \"\", \n      address: \"\",\n      description: \"\",\n      imageURL: \"\", \n      //campusId: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let campus = {\n        name: this.state.name, \n        address: this.state.address,\n        description: this.state.description,\n        imageURL: this.state.imageURL, \n    };\n    \n    // Add new campus in back-end database\n    let newCampus = await this.props.addCampus(campus);\n\n    // Update state, and trigger redirect to show the new campus\n    this.setState({\n        name: \"\", \n        address: \"\",\n        description: \"\",\n        imageURL: \"\", \n        redirect: true, \n        redirectId: newCampus.id,\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new campus input form\n  render() {\n    // Redirect to new campus's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/campus/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewCampusView \n          handleChange = {this.handleChange} \n          handleSubmit= {this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewCampusContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addCampus: (campus) => dispatch(addCampusThunk(campus)),\n    })\n}\n\n// Export store-connected container by default\n// NewCampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewCampusContainer);"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,MAAM,MAAM,UAAU;AAC7B,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,cAAc,QAAQ,oBAAoB;AAAC;AAEpD,MAAMC,kBAAkB,SAASL,SAAS,CAAC;EACzC;EACAM,WAAW,CAACC,KAAK,EAAC;IAChB,KAAK,CAACA,KAAK,CAAC;IAAC,KAafC,YAAY,GAAGC,KAAK,IAAI;MACtB,IAAI,CAACC,QAAQ,CAAC;QACZ,CAACD,KAAK,CAACE,MAAM,CAACC,IAAI,GAAGH,KAAK,CAACE,MAAM,CAACE;MACpC,CAAC,CAAC;IACJ,CAAC;IAAA,KAGDC,YAAY,GAAG,MAAML,KAAK,IAAI;MAC5BA,KAAK,CAACM,cAAc,EAAE,CAAC,CAAE;;MAEzB,IAAIC,MAAM,GAAG;QACTJ,IAAI,EAAE,IAAI,CAACK,KAAK,CAACL,IAAI;QACrBM,OAAO,EAAE,IAAI,CAACD,KAAK,CAACC,OAAO;QAC3BC,WAAW,EAAE,IAAI,CAACF,KAAK,CAACE,WAAW;QACnCC,QAAQ,EAAE,IAAI,CAACH,KAAK,CAACG;MACzB,CAAC;;MAED;MACA,IAAIC,SAAS,GAAG,MAAM,IAAI,CAACd,KAAK,CAACe,SAAS,CAACN,MAAM,CAAC;;MAElD;MACA,IAAI,CAACN,QAAQ,CAAC;QACVE,IAAI,EAAE,EAAE;QACRM,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE,EAAE;QACfC,QAAQ,EAAE,EAAE;QACZG,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAEH,SAAS,CAACI;MAC1B,CAAC,CAAC;IACJ,CAAC;IAzCC,IAAI,CAACR,KAAK,GAAG;MACXL,IAAI,EAAE,EAAE;MACRM,OAAO,EAAE,EAAE;MACXC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MACZ;MACAG,QAAQ,EAAE,KAAK;MACfC,UAAU,EAAE;IACd,CAAC;EACH;;EAEA;;EAgCA;EACAE,oBAAoB,GAAG;IACnB,IAAI,CAAChB,QAAQ,CAAC;MAACa,QAAQ,EAAE,KAAK;MAAEC,UAAU,EAAE;IAAI,CAAC,CAAC;EACtD;;EAEA;EACAG,MAAM,GAAG;IACP;IACA,IAAG,IAAI,CAACV,KAAK,CAACM,QAAQ,EAAE;MACtB,oBAAQ,QAAC,QAAQ;QAAC,EAAE,EAAG,WAAU,IAAI,CAACN,KAAK,CAACO,UAAW;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE;IAC7D;;IAEA;IACA,oBACE;MAAA,wBACE,QAAC,MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACV,QAAC,aAAa;QACZ,YAAY,EAAI,IAAI,CAAChB,YAAa;QAClC,YAAY,EAAG,IAAI,CAACM;MAAa;QAAA;QAAA;QAAA;MAAA,QACjC;IAAA;MAAA;MAAA;MAAA;IAAA,QACE;EAEV;AACF;;AAEA;AACA;AACA;AACA,MAAMc,WAAW,GAAIC,QAAQ,IAAK;EAC9B,OAAO;IACHP,SAAS,EAAGN,MAAM,IAAKa,QAAQ,CAACzB,cAAc,CAACY,MAAM,CAAC;EAC1D,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA,eAAef,OAAO,CAAC,IAAI,EAAE2B,WAAW,CAAC,CAACvB,kBAAkB,CAAC"},"metadata":{},"sourceType":"module"}