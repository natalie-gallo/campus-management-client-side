{"ast":null,"code":"var _jsxFileName = \"/Users/nataliegallo/CS/webdev/finalproject/client-side/src/components/containers/NewStudentContainer.js\";\n/*==================================================\nNewStudentContainer.js\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props) {\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault(); // Prevent browser reload/refresh after submit.\n\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId\n      };\n\n      // Add new student in back-end database\n      let newStudent = await this.props.addStudent(student);\n      console.log(student);\n\n      // Update state, and trigger redirect to show the new student\n      this.setState({\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\",\n        imageUrl: \"\",\n        gpa: null,\n        campusId: null,\n        redirect: true,\n        redirectId: newStudent.id\n      });\n    };\n    this.state = {\n      firstname: \"\",\n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: null,\n      campusId: null,\n      redirect: false,\n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }, this);\n    }\n\n    // Display the input form via the corresponding View component\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewStudentView, {\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = dispatch => {\n  return {\n    addStudent: student => dispatch(addStudentThunk(student))\n  };\n};\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","NewStudentView","addStudentThunk","NewStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","email","imageUrl","gpa","campusId","newStudent","addStudent","console","log","redirect","redirectId","id","componentWillUnmount","render","mapDispatch","dispatch"],"sources":["/Users/nataliegallo/CS/webdev/finalproject/client-side/src/components/containers/NewStudentContainer.js"],"sourcesContent":["/*==================================================\nNewStudentContainer.js\nThe Container component is responsible for stateful logic and data fetching, and\npasses data (if any) as props to the corresponding View component.\nIf needed, it also defines the component's \"connect\" function.\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport NewStudentView from '../views/NewStudentView';\nimport { addStudentThunk } from '../../store/thunks';\n\nclass NewStudentContainer extends Component {\n  // Initialize state\n  constructor(props){\n    super(props);\n    this.state = {\n      firstname: \"\", \n      lastname: \"\",\n      email: \"\",\n      imageUrl: \"\",\n      gpa: null,\n      campusId: null, \n      redirect: false, \n      redirectId: null\n    };\n  }\n\n  // Capture input data when it is entered\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  // Take action after user click the submit button\n  handleSubmit = async event => {\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\n\n    let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        email: this.state.email,\n        imageUrl: this.state.imageUrl,\n        gpa: this.state.gpa,\n        campusId: this.state.campusId\n    };\n    \n    // Add new student in back-end database\n    let newStudent = await this.props.addStudent(student);\n    console.log(student);\n\n    // Update state, and trigger redirect to show the new student\n    this.setState({\n      firstname: \"\", \n      lastname: \"\", \n      email: \"\",\n      imageUrl: \"\",\n      gpa: null,\n      campusId: null, \n      redirect: true, \n      redirectId: newStudent.id\n    });\n  }\n\n  // Unmount when the component is being removed from the DOM:\n  componentWillUnmount() {\n      this.setState({redirect: false, redirectId: null});\n  }\n\n  // Render new student input form\n  render() {\n    // Redirect to new student's page after submit\n    if(this.state.redirect) {\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\n    }\n\n    // Display the input form via the corresponding View component\n    return (\n      <div>\n        <Header />\n        <NewStudentView \n          handleChange = {this.handleChange} \n          handleSubmit={this.handleSubmit}      \n        />\n      </div>          \n    );\n  }\n}\n\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nconst mapDispatch = (dispatch) => {\n    return({\n        addStudent: (student) => dispatch(addStudentThunk(student)),\n    })\n}\n\n// Export store-connected container by default\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(null, mapDispatch)(NewStudentContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module"}